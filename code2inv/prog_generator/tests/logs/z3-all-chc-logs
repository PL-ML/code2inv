#tasks:  133
sygus-bench-108.c.smt takes 0.037 seconds, out: unsat
(forall ((A Int) (B Int) (C Int) (D Int))
  (! (= (main@_bb A B C D) (>= (+ A (* (- 1) B)) 0)) :weight 0))

sygus-bench-107.c.smt takes 0.037 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (or (>= (+ A (* (- 1) B)) 0) (<= C 0))))
       (= (main@_bb A B C) a!1))
     :weight 0))

sygus-bench-37.c.smt takes -1.000 seconds, out: (error "line 3 column 12: Invalid query argument, expected uinterpreted function name, but argument is interpreted")

sygus-bench-102.c.smt takes 0.038 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (or (<= A 0) (<= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B) a!1))
     :weight 0))

sygus-bench-105.c.smt takes 0.038 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (or (<= A 0) (<= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B) a!1))
     :weight 0))

sygus-bench-43.c.smt takes -1.000 seconds, out: (error "line 3 column 12: Invalid query argument, expected uinterpreted function name, but argument is interpreted")

sygus-bench-101.c.smt takes 0.040 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (or (<= A 0) (<= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B) a!1))
     :weight 0))

sygus-bench-49.c.smt takes -1.000 seconds, out: (error "line 3 column 12: Invalid query argument, expected uinterpreted function name, but argument is interpreted")

sygus-bench-44.c.smt takes -1.000 seconds, out: (error "line 3 column 12: Invalid query argument, expected uinterpreted function name, but argument is interpreted")

sygus-bench-109.c.smt takes 0.038 seconds, out: unsat
(forall ((A Int) (B Int) (C Int) (D Int))
  (! (let ((a!1 (or (<= C 0) (>= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B C D) a!1))
     :weight 0))

sygus-bench-48.c.smt takes -1.000 seconds, out: (error "line 3 column 12: Invalid query argument, expected uinterpreted function name, but argument is interpreted")

sygus-bench-39.c.smt takes -1.000 seconds, out: (error "line 3 column 12: Invalid query argument, expected uinterpreted function name, but argument is interpreted")

sygus-bench-14.c.smt takes 0.031 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (and (or (not (>= B 4)) (not (<= A 0))) (not (<= A (- 2))))))
       (= (main@_bb!slice!1 A B) a!1))
     :weight 0))

sygus-bench-104.c.smt takes 0.041 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (or (<= A 0) (<= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B) a!1))
     :weight 0))

sygus-bench-128.c.smt takes 0.035 seconds, out: unsat
(forall ((A Int) (B Int)) (! (= (main@_bb A B) (not (<= A 0))) :weight 0))

sygus-bench-114.c.smt takes 0.040 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (and (<= (+ A (* (- 1) B)) 0) (<= (+ B (* (- 1) A)) 0))))
       (= (main@_bb!slice!1 A B) a!1))
     :weight 0))

sygus-bench-129.c.smt takes 0.035 seconds, out: unsat
(forall ((A Int) (B Int)) (! (= (main@_bb A B) (not (<= A 0))) :weight 0))

sygus-bench-10.c.smt takes 0.042 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (and (or (not (>= B 4)) (not (<= A 0))) (not (<= A (- 2))))))
       (= (main@_bb!slice!1 A B) a!1))
     :weight 0))

sygus-bench-116.c.smt takes 0.041 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (and (<= (+ A (* (- 1) B)) 0) (<= (+ B (* (- 1) A)) 0))))
       (= (main@_bb!slice!1 A B) a!1))
     :weight 0))

sygus-bench-115.c.smt takes 0.041 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (and (<= (+ A (* (- 1) B)) 0) (<= (+ B (* (- 1) A)) 0))))
       (= (main@_bb!slice!1 A B) a!1))
     :weight 0))

sygus-bench-133.c.smt takes 0.037 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (= (main@_bb A B) (<= (+ A (* (- 1) B)) 0)) :weight 0))

sygus-bench-117.c.smt takes 0.042 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (and (<= (+ A (* (- 1) B)) 0) (<= (+ B (* (- 1) A)) 0))))
       (= (main@_bb!slice!1 A B) a!1))
     :weight 0))

sygus-bench-131.c.smt takes 0.039 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb A B C) (or (not (<= A 0)) (>= C 0))) :weight 0))

sygus-bench-35.c.smt takes 0.033 seconds, out: unsat
(forall ((A Int) (B Int)) (! (= (main@_bb A B) (>= A 0)) :weight 0))

sygus-bench-132.c.smt takes 0.039 seconds, out: unsat
(forall ((A Int) (B Int)) (! (= (main@_bb!slice!1 A B) (>= A 0)) :weight 0))

sygus-bench-38.c.smt takes 0.033 seconds, out: unsat
(forall ((A Int) (B Int)) (! (= (main@_bb!slice!1 A B) (>= A 0)) :weight 0))

sygus-bench-42.c.smt takes 0.033 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb A B C) (not (<= B 0))) :weight 0))

sygus-bench-11.c.smt takes 0.045 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (and (or (not (<= B 0)) (not (>= A 20))) (not (<= B (- 10))))))
       (= (main@_bb!slice!1 A B) a!1))
     :weight 0))

sygus-bench-106.c.smt takes 0.049 seconds, out: sat
(and (main@_bb 0 (- 1) 1) (main@_bb 0 0 0))

sygus-bench-34.c.smt takes 0.037 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (or (>= A 0) (<= (+ B (* (- 1) A)) 0))))
       (= (main@_bb A B) a!1))
     :weight 0))

sygus-bench-29.c.smt takes 0.038 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (or (>= A 0) (<= (+ B (* (- 1) A)) 0))))
       (= (main@_bb A B) a!1))
     :weight 0))

sygus-bench-28.c.smt takes 0.039 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (or (>= A 0) (<= (+ B (* (- 1) A)) 0))))
       (= (main@_bb A B) a!1))
     :weight 0))

sygus-bench-47.c.smt takes 0.034 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb A B C) (not (<= B 0))) :weight 0))

sygus-bench-33.c.smt takes 0.038 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (or (>= A 0) (<= (+ B (* (- 1) A)) 0))))
       (= (main@_bb A B) a!1))
     :weight 0))

sygus-bench-50.c.smt takes 0.035 seconds, out: unsat
(forall ((A Int) (B Int)) (! (= (main@_bb A B) (>= A 0)) :weight 0))

sygus-bench-40.c.smt takes 0.037 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb A B C) (and (>= A 0) (not (<= B 0)))) :weight 0))

sygus-bench-130.c.smt takes 0.046 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb A B C) (or (not (<= A 0)) (>= B 0))) :weight 0))

sygus-bench-13.c.smt takes 0.045 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (and (or (not (<= B 0)) (not (>= A 4))) (not (<= B (- 2))))))
       (= (main@_bb!slice!1 A B) a!1))
     :weight 0))

sygus-bench-36.c.smt takes 0.040 seconds, out: unsat
(forall ((A Int) (B Int)) (! (= (main@_bb A B) (not (>= A 41))) :weight 0))

sygus-bench-41.c.smt takes 0.039 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B C) a!1))
     :weight 0))

sygus-bench-51.c.smt takes 0.037 seconds, out: unsat
(forall ((A Int) (B Int)) (! (= (main@_bb A B) (not (>= A 5))) :weight 0))

sygus-bench-12.c.smt takes 0.047 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (and (or (not (>= B 20)) (not (<= A 0))) (not (<= A (- 10))))))
       (= (main@_bb!slice!1 A B) a!1))
     :weight 0))

sygus-bench-27.c.smt takes 0.043 seconds, out: sat
(main@_bb 0 0)

sygus-bench-26.c.smt takes 0.043 seconds, out: sat
(main@_bb 0 0)

sygus-bench-31.c.smt takes 0.042 seconds, out: sat
(main@_bb 0 0)

sygus-bench-110.c.smt takes 0.054 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) C)) 0)))
           (a!2 (not (>= (+ C (* (- 1) A)) 2)))
           (a!3 (or (<= A 0) (<= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B C) (and a!1 (>= A 0) a!2 a!3)))
     :weight 0))

sygus-bench-113.c.smt takes 0.054 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) C)) 0)))
           (a!2 (not (>= (+ C (* (- 1) A)) 2)))
           (a!3 (or (<= A 0) (<= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B C) (and a!1 (>= A 0) a!2 a!3)))
     :weight 0))

sygus-bench-32.c.smt takes 0.043 seconds, out: sat
(main@_bb 0 0)

sygus-bench-45.c.smt takes 0.040 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb A B C) (and (>= A 0) (not (<= B 0)))) :weight 0))

sygus-bench-15.c.smt takes 0.048 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) C)) 0))))
       (= (main@_bb!slice!1 A B C) (or (<= A 0) a!1)))
     :weight 0))

sygus-bench-52.c.smt takes -1.000 seconds, out: (error "line 3 column 12: Invalid query argument, expected uinterpreted function name, but argument is interpreted")

sygus-bench-111.c.smt takes 0.055 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) C)) 0)))
           (a!2 (not (>= (+ C (* (- 1) A)) 2)))
           (a!3 (or (<= A 0) (<= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B C) (and a!1 (>= A 0) a!2 a!3)))
     :weight 0))

sygus-bench-100.c.smt takes 0.059 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (and (<= (+ A B (* (- 1) C)) 0)
                     (<= (+ A (* (- 1) C)) 0)
                     (<= (+ C (* (- 1) A) (* (- 1) B)) 0))))
       (= (main@_bb A B C) a!1))
     :weight 0))

sygus-bench-118.c.smt takes 0.055 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) C)) 0)))
           (a!2 (not (>= (+ C (* (- 1) A)) 2)))
           (a!3 (or (<= A 0) (<= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B C) (and a!1 (>= A 0) a!2 a!3)))
     :weight 0))

sygus-bench-119.c.smt takes 0.054 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) C)) 0)))
           (a!2 (not (>= (+ C (* (- 1) A)) 2)))
           (a!3 (or (<= A 0) (<= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B C) (and a!1 (>= A 0) a!2 a!3)))
     :weight 0))

sygus-bench-112.c.smt takes 0.056 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) C)) 0)))
           (a!2 (not (>= (+ C (* (- 1) A)) 2)))
           (a!3 (or (<= A 0) (<= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B C) (and a!1 (>= A 0) a!2 a!3)))
     :weight 0))

sygus-bench-22.c.smt takes 0.048 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb!slice!1 A B C) (and (not (<= B 0)) (not (<= A 0)))) :weight 0))

sygus-bench-17.c.smt takes 0.049 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) C)) 0))))
       (= (main@_bb!slice!1 A B C) (or (not (>= A 2)) a!1)))
     :weight 0))

sygus-bench-19.c.smt takes 0.049 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) C)) 0))))
       (= (main@_bb!slice!1 A B C) (or (<= A 0) a!1)))
     :weight 0))

sygus-bench-20.c.smt takes 0.049 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb!slice!1 A B C) (and (>= B 0) (>= A 0))) :weight 0))

sygus-bench-21.c.smt takes 0.049 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) C)) 0))))
       (= (main@_bb!slice!1 A B C) (or (not (>= A 2)) a!1)))
     :weight 0))

sygus-bench-3.c.smt takes 0.044 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (or (<= A 0) (>= (+ B (* (- 1) C)) 0))))
       (= (main@_bb A B C) a!1))
     :weight 0))

sygus-bench-122.c.smt takes 0.055 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) C)) 0)))
           (a!2 (not (>= (+ C (* (- 1) A)) 2)))
           (a!3 (or (<= A 0) (<= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B C) (and a!1 (>= A 0) a!2 a!3)))
     :weight 0))

sygus-bench-18.c.smt takes 0.051 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb!slice!1 A B C) (and (not (<= B 0)) (not (<= A 0)))) :weight 0))

sygus-bench-16.c.smt takes 0.051 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb!slice!1 A B C) (and (>= B 0) (>= A 0))) :weight 0))

sygus-bench-123.c.smt takes 0.055 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) C)) 0)))
           (a!2 (not (>= (+ C (* (- 1) A)) 2)))
           (a!3 (or (<= A 0) (<= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B C) (and a!1 (>= A 0) a!2 a!3)))
     :weight 0))

sygus-bench-55.c.smt takes 0.026 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb A B C) (not (<= B 0))) :weight 0))

sygus-bench-73.c.smt takes -1.000 seconds, out: (error "line 3 column 12: Invalid query argument, expected uinterpreted function name, but argument is interpreted")

sygus-bench-76.c.smt takes -1.000 seconds, out: (error "line 3 column 12: Invalid query argument, expected uinterpreted function name, but argument is interpreted")

sygus-bench-54.c.smt takes 0.033 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B C) a!1))
     :weight 0))

sygus-bench-56.c.smt takes 0.033 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B C) a!1))
     :weight 0))

sygus-bench-57.c.smt takes 0.033 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) B)) 0))))
       (= (main@_bb A B C) a!1))
     :weight 0))

sygus-bench-68.c.smt takes 0.029 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (or (not (>= C 2)) (<= (+ B (* (- 1) A)) 0))))
       (= (main@_bb A B C) a!1))
     :weight 0))

sygus-bench-60.c.smt takes 0.034 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb A B C) (not (<= B 0))) :weight 0))

sygus-bench-53.c.smt takes 0.036 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb A B C) (and (>= A 0) (not (<= B 0)))) :weight 0))

sygus-bench-58.c.smt takes 0.035 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb A B C) (and (>= A 0) (not (<= B 0)))) :weight 0))

sygus-bench-91.c.smt takes -1.000 seconds, out: (error "line 3 column 12: Invalid query argument, expected uinterpreted function name, but argument is interpreted")

sygus-bench-5.c.smt takes 0.035 seconds, out: unsat
(forall ((A Int) (B Int) (C Int) (D Int))
  (! (let ((a!1 (or (<= A 0) (>= (+ B (* (- 1) C)) 0))))
       (= (main@_bb A B C D) a!1))
     :weight 0))

sygus-bench-92.c.smt takes -1.000 seconds, out: (error "line 3 column 12: Invalid query argument, expected uinterpreted function name, but argument is interpreted")

sygus-bench-79.c.smt takes 0.024 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb!slice!1 A B C) (>= A 0)) :weight 0))

sygus-bench-97.c.smt takes -1.000 seconds, out: (error "line 3 column 12: Invalid query argument, expected uinterpreted function name, but argument is interpreted")

sygus-bench-63.c.smt takes 0.036 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (= (main@_bb A B) (or (not (>= A 2)) (>= B 0))) :weight 0))

sygus-bench-98.c.smt takes -1.000 seconds, out: (error "line 3 column 12: Invalid query argument, expected uinterpreted function name, but argument is interpreted")

sygus-bench-81.c.smt takes 0.025 seconds, out: unsat
(forall ((A Int) (B Int)) (! (= (main@_bb!slice!1 A B) (>= A 0)) :weight 0))

sygus-bench-65.c.smt takes 0.035 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (= (main@_bb A B) (or (not (>= A 2)) (>= B 0))) :weight 0))

sygus-bench-77.c.smt takes 0.028 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb!slice!1 A B C) (<= (+ C (* (- 1) B)) 0)) :weight 0))

sygus-bench-70.c.smt takes 0.033 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (>= (+ B (* (- 1) A)) 0))))
       (= (main@_bb A B C) (or (not (>= C 2)) a!1)))
     :weight 0))

sygus-bench-78.c.smt takes 0.030 seconds, out: unsat
(forall ((A Int) (B Int)) (! (= (main@_bb!slice!1 A B) (>= A 0)) :weight 0))

sygus-bench-69.c.smt takes 0.035 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb A B C) (or (not (>= C 2)) (>= B 0))) :weight 0))

sygus-bench-74.c.smt takes 0.032 seconds, out: unsat
(forall ((A Int) (B Int)) (! (= (main@_bb!slice!1 A B) (>= A 0)) :weight 0))

sygus-bench-6.c.smt takes 0.035 seconds, out: unsat
(forall ((A Int) (B Int) (C Int) (D Int))
  (! (let ((a!1 (or (<= A 0) (>= (+ B (* (- 1) C)) 0))))
       (= (main@_bb A B C D) a!1))
     :weight 0))

sygus-bench-95.c.smt takes 0.024 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (and (<= (+ A (* (- 1) B)) 0) (<= (+ B (* (- 1) A)) 0))))
       (= (main@_bb A B C) a!1))
     :weight 0))

sygus-bench-67.c.smt takes 0.038 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb A B C) (or (not (>= C 2)) (>= B 0))) :weight 0))

sygus-bench-71.c.smt takes 0.035 seconds, out: unsat
(forall ((A Int) (B Int)) (! (= (main@_bb!slice!1 A B) (>= A 0)) :weight 0))

sygus-bench-80.c.smt takes 0.029 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb!slice!1 A B C) (<= (+ C (* (- 1) B)) 0)) :weight 0))

sygus-bench-90.c.smt takes 0.028 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (<= (+ B (* (- 1) C)) 0))))
     (let ((a!2 (and (or (not (<= A 0)) a!1) (not (>= A 2)))))
       (= (main@_bb!slice!1 A B C) a!2)))
     :weight 0))

sygus-bench-46.c.smt takes 0.066 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (and (<= (+ A (* (- 1) B)) 0) (not (<= B 0)))))
       (= (main@_bb A B C) a!1))
     :weight 0))

sygus-bench-83.c.smt takes 0.030 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (= (main@_bb A B) (or (not (<= B 0)) (not (>= A (- 4999))))) :weight 0))

sygus-bench-88.c.smt takes 0.029 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (<= (+ B (* (- 1) C)) 0))))
     (let ((a!2 (and (or (not (<= A 0)) a!1) (not (>= A 2)))))
       (= (main@_bb!slice!1 A B C) a!2)))
     :weight 0))

sygus-bench-75.c.smt takes 0.036 seconds, out: sat
(main@_bb!slice!1 4608 0)

sygus-bench-82.c.smt takes 0.033 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (= (main@_bb!slice!1 A B C) (>= A 0)) :weight 0))

sygus-bench-59.c.smt takes 0.047 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (and (<= (+ A (* (- 1) B)) 0) (not (<= B 0)))))
       (= (main@_bb A B C) a!1))
     :weight 0))

sygus-bench-72.c.smt takes 0.040 seconds, out: sat
(main@_bb!slice!1 4608 0)

sygus-bench-86.c.smt takes 0.033 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (= (main@_bb A B) (or (not (<= B 0)) (not (>= A (- 49))))) :weight 0))

sygus-bench-7.c.smt takes 0.036 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (and (or (not (<= B 0)) (not (>= A 20))) (not (<= B (- 10))))))
       (= (main@_bb!slice!1 A B) a!1))
     :weight 0))

sygus-bench-89.c.smt takes 0.033 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (<= (+ B (* (- 1) C)) 0))))
     (let ((a!2 (and (or (not (<= A 0)) a!1) (not (>= A 2)))))
       (= (main@_bb!slice!1 A B C) a!2)))
     :weight 0))

sygus-bench-84.c.smt takes 0.035 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (= (main@_bb A B) (or (not (<= B 0)) (not (>= A (- 49))))) :weight 0))

sygus-bench-85.c.smt takes 0.034 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (= (main@_bb A B) (or (not (<= B 0)) (not (>= A (- 14999))))) :weight 0))

sygus-bench-61.c.smt takes 0.049 seconds, out: sat
(and (main@_bb 1 1 0) (main@_bb 0 1 0))

sygus-bench-62.c.smt takes 0.048 seconds, out: sat
(and (main@_bb 1 1 0) (main@_bb 0 1 0))

sygus-bench-9.c.smt takes 0.032 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (and (or (not (<= B 0)) (not (>= A 4))) (not (<= B (- 2))))))
       (= (main@_bb!slice!1 A B) a!1))
     :weight 0))

sygus-bench-96.c.smt takes 0.033 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (and (<= (+ A (* (- 1) B)) 0) (<= (+ B (* (- 1) A)) 0))))
       (= (main@_bb A B C) a!1))
     :weight 0))

sygus-bench-99.c.smt takes 0.034 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (and (<= (+ A B (* (- 1) C)) 0)
                     (<= (+ C (* (- 1) A) (* (- 1) B)) 0))))
       (= (main@_bb A B C) a!1))
     :weight 0))

sygus-bench-64.c.smt takes 0.051 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (= (main@_bb A B) (or (not (>= A 2)) (not (>= B 10)))) :weight 0))

sygus-bench-87.c.smt takes 0.038 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (not (<= (+ B (* (- 1) C)) 0))))
     (let ((a!2 (and (or (not (<= A 0)) a!1) (not (>= A 2)))))
       (= (main@_bb!slice!1 A B C) a!2)))
     :weight 0))

sygus-bench-8.c.smt takes 0.037 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (and (or (not (>= B 20)) (not (<= A 0))) (not (<= A (- 10))))))
       (= (main@_bb!slice!1 A B) a!1))
     :weight 0))

sygus-bench-24.c.smt takes 0.087 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) B)) 10))))
     (let ((a!2 (and (or (not (<= A 6)) (not (<= B 6)))
                     (or (not (>= A 10)) (not (>= B 2)))
                     (or (not (>= A 9)) (not (>= B 4)))
                     (or (not (>= B 6)) (not (>= A 8)))
                     (or (not (>= A 7)) (not (>= B 8)))
                     (not (<= A 5))
                     a!1
                     (not (<= B 0))
                     (or (not (<= A 8)) (not (<= B 2)))
                     (or (not (<= A 7)) (not (<= B 4))))))
       (= (main@_bb A B) a!2)))
     :weight 0))

sygus-bench-93.c.smt takes 0.043 seconds, out: unsat
(forall ((A Int) (B Int) (C Int) (D Int) (E Int))
  (! (let ((a!1 (and (<= (+ A B (* (- 3) C)) 0)
                     (<= (+ A B (* (- 3) E)) 0)
                     (>= (+ A B (* (- 3) C)) 0))))
       (= (main@_bb A B C D E) a!1))
     :weight 0))

sygus-bench-121.c.smt takes 0.143 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (and (or (not (<= A 8)) (not (>= B 8)))
                     (>= B 0)
                     (or (not (<= B 0)) (not (>= A 2)))
                     (or (not (<= B 1)) (not (>= A 3)))
                     (or (not (<= B 2)) (not (>= A 4)))
                     (or (not (<= B 3)) (not (>= A 5)))
                     (or (not (<= B 4)) (not (>= A 6)))
                     (or (not (<= B 5)) (not (>= A 7)))
                     (or (not (<= B 6)) (not (>= A 8)))
                     (or (not (<= B 7)) (not (>= A 9)))
                     (not (>= B 9))
                     (not (<= A 0))
                     (or (<= B 0) (not (<= A 1)))
                     (or (not (<= A 2)) (not (>= B 2)))
                     (or (not (<= A 3)) (not (>= B 3)))
                     (or (not (<= A 4)) (not (>= B 4)))
                     (or (not (<= A 5)) (not (>= B 5)))
                     (or (not (<= A 6)) (not (>= B 6)))
                     (or (not (<= A 7)) (not (>= B 7))))))
       (= (main@_bb A B) a!1))
     :weight 0))

sygus-bench-120.c.smt takes 0.154 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (and (or (not (<= A 8)) (not (>= B 8)))
                     (>= B 0)
                     (or (not (<= B 0)) (not (>= A 2)))
                     (or (not (<= B 1)) (not (>= A 3)))
                     (or (not (<= B 2)) (not (>= A 4)))
                     (or (not (<= B 3)) (not (>= A 5)))
                     (or (not (<= B 4)) (not (>= A 6)))
                     (or (not (<= B 5)) (not (>= A 7)))
                     (or (not (<= B 6)) (not (>= A 8)))
                     (or (not (<= B 7)) (not (>= A 9)))
                     (not (>= B 9))
                     (not (<= A 0))
                     (or (<= B 0) (not (<= A 1)))
                     (or (not (<= A 2)) (not (>= B 2)))
                     (or (not (<= A 3)) (not (>= B 3)))
                     (or (not (<= A 4)) (not (>= B 4)))
                     (or (not (<= A 5)) (not (>= B 5)))
                     (or (not (<= A 6)) (not (>= B 6)))
                     (or (not (<= A 7)) (not (>= B 7))))))
       (= (main@_bb A B) a!1))
     :weight 0))

sygus-bench-23.c.smt takes 0.172 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (let ((a!1 (not (>= (+ A (* (- 1) B)) 20)))
           (a!2 (not (>= (+ A (* (- 1) B)) 6))))
     (let ((a!3 (and (or (not (<= A 13)) (not (<= B 13)))
                     (not (>= A 21))
                     (or (not (>= A 20)) (not (>= B 3)))
                     (or (not (>= A 19)) (not (>= B 5)))
                     (or (not (>= A 18)) (not (>= B 7)))
                     (or (not (>= A 17)) (not (>= B 9)))
                     (or (not (>= A 16)) (not (>= B 11)))
                     (or (not (>= A 15)) (not (>= B 13)))
                     (or (not (>= A 14)) (not (>= B 15)))
                     (not (<= A 12))
                     a!1
                     (or (not (<= A 19)) (not (<= B 1)))
                     (or (not (<= A 18)) (not (<= B 3)))
                     (or (not (<= A 17)) (not (<= B 5)))
                     (or (not (<= A 16)) (not (<= B 7)))
                     (or (not (<= A 15)) a!2)
                     (or (not (<= A 14)) (not (<= B 11))))))
       (= (main@_bb A B) a!3)))
     :weight 0))

sygus-bench-30.c.smt takes 0.225 seconds, out: unsat
(forall ((A Int)) (! (= (main@_bb A) (>= A 0)) :weight 0))

sygus-bench-66.c.smt takes 0.201 seconds, out: unsat
(forall ((A Int) (B Int))
  (! (= (main@_bb A B) (or (not (>= A 2)) (not (>= B 100)))) :weight 0))

sygus-bench-103.c.smt takes 0.263 seconds, out: unsat
(forall ((A Int)) (! (= (main@_bb A) (not (>= A 101))) :weight 0))

sygus-bench-4.c.smt takes 1.371 seconds, out: unsat
(forall ((A Int) (B Int) (C Int))
  (! (let ((a!1 (or (<= A 0) (>= (+ B (* (- 1) C)) 0))))
       (= (main@_bb A B C) a!1))
     :weight 0))

sygus-bench-126.c.smt takes -1.000 seconds, out: 
sygus-bench-125.c.smt takes -1.000 seconds, out: 
sygus-bench-124.c.smt takes -1.000 seconds, out: 
sygus-bench-127.c.smt takes -1.000 seconds, out: 
sygus-bench-94.c.smt takes -1.000 seconds, out: 
sygus-bench-1.c.smt takes -1.000 seconds, out: 
sygus-bench-25.c.smt takes -1.000 seconds, out: 
sygus-bench-2.c.smt takes -1.000 seconds, out: 
